[nodemon] restarting due to changes...
[nodemon] starting `node server.js`
(node:18232) Warning: Accessing non-existent property 'post' of module exports inside circular dependency
(Use `node --trace-warnings ...` to show where the warning was created)
Executing (default): CREATE TABLE IF NOT EXISTS `users` (`id` INTEGER UNSIGNED NOT NULL auto_increment , `lastName` VARCHAR(255) NOT 
NULL, `name` VARCHAR(100) NOT NULL, `email` VARCHAR(100) NOT NULL, `password` VARCHAR(64) NOT NULL, `profilePicture` VARCHAR(255) DEFAULT '', `coverPicture` VARCHAR(255) DEFAULT '', `bio` TEXT, `isActive` TINYINT DEFAULT false, `role` ENUM('user', 'admin') NOT NULL 
DEFAULT 'user', `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, UNIQUE `email` (`email`), PRIMARY KEY (`id`)) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `users`
Executing (default): CREATE TABLE IF NOT EXISTS `posts` (`id` INTEGER UNSIGNED NOT NULL auto_increment , `attachement` VARCHAR(255), 
`content` TEXT, `totalLikes` INTEGER UNSIGNED DEFAULT 0, `totalComments` INTEGER UNSIGNED DEFAULT 0, `createdAt` DATETIME, `updatedAt` DATETIME, `deletedAt` DATETIME, `userId` INTEGER UNSIGNED, PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON 
DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `posts`
Executing (default): CREATE TABLE IF NOT EXISTS `comments` (`id` INTEGER UNSIGNED NOT NULL auto_increment , `content` TEXT, `likes` INTEGER UNSIGNED DEFAULT 0, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `deletedAt` DATETIME, `postId` INTEGER UNSIGNED, `userId` INTEGER UNSIGNED, PRIMARY KEY (`id`), FOREIGN KEY (`postId`) REFERENCES `posts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `comments`
Executing (default): CREATE TABLE IF NOT EXISTS `reports` (`id` INTEGER UNSIGNED NOT NULL auto_increment , `reason` TEXT NOT NULL, `state` ENUM('Non lu', 'En cours', 'Accepté', 'Rejeté'), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `commentId` INTEGER UNSIGNED, `postId` INTEGER UNSIGNED, `userId` INTEGER UNSIGNED, PRIMARY KEY (`id`), FOREIGN KEY (`commentId`) REFERENCES `comments` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`postId`) REFERENCES `posts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, 
FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `reports`
Executing (default): CREATE TABLE IF NOT EXISTS `follows` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `followingId` INTEGER UNSIGNED , `followedId` INTEGER UNSIGNED , PRIMARY KEY (`followingId`, `followedId`), FOREIGN KEY (`followingId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`followedId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `follows`
Executing (default): CREATE TABLE IF NOT EXISTS `likesPost` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER UNSIGNED , `postId` INTEGER UNSIGNED , PRIMARY KEY (`userId`, `postId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`postId`) REFERENCES `posts` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;Executing (default): SHOW INDEX FROM `likesPost`
Executing (default): CREATE TABLE IF NOT EXISTS `likesComment` (`createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER UNSIGNED , `commentId` INTEGER UNSIGNED , PRIMARY KEY (`userId`, `commentId`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE CASCADE ON UPDATE CASCADE, FOREIGN KEY (`commentId`) REFERENCES `comments` (`id`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `likesComment`
Executing (default): CREATE TABLE IF NOT EXISTS `refreshtokens` (`id` INTEGER UNSIGNED NOT NULL auto_increment , `token` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL, `userId` INTEGER UNSIGNED, UNIQUE `token` (`token`), PRIMARY KEY (`id`), FOREIGN KEY (`userId`) REFERENCES `users` (`id`) ON DELETE SET NULL ON UPDATE CASCADE) ENGINE=InnoDB;
Executing (default): SHOW INDEX FROM `refreshtokens`
Listening on port 3000
Executing (default): SELECT `id`, `lastName`, `name`, `email`, `password`, `profilePicture`, `coverPicture`, `bio`, `isActive`, `role`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `users` WHERE (`users`.`deletedAt` IS NULL AND `users`.`email` = 'admin@groupomania.com');
Executing (default): INSERT INTO `refreshtokens` (`id`,`token`,`createdAt`,`updatedAt`,`userId`) VALUES (DEFAULT,?,?,?,?);
5150
5150
Executing (default): SELECT `id`, `lastName`, `name`, `email`, `profilePicture`, `coverPicture`, `bio`, `isActive`, `role`, `createdAt`, `updatedAt`, `deletedAt` FROM `users` AS `users` WHERE (`users`.`deletedAt` IS NULL) ORDER BY `users`.`createdAt` DESC;
entra en refrshToken L11
entra en refrshToken L11
Executing (default): SELECT `refreshtokens`.`id`, `refreshtokens`.`token`, `refreshtokens`.`createdAt`, `refreshtokens`.`updatedAt`, 
`refreshtokens`.`userId`, `user`.`id` AS `user.id`, `user`.`lastName` AS `user.lastName`, `user`.`name` AS `user.name`, `user`.`email` AS `user.email`, `user`.`password` AS `user.password`, `user`.`profilePicture` AS `user.profilePicture`, `user`.`coverPicture` AS `user.coverPicture`, `user`.`bio` AS `user.bio`, `user`.`isActive` AS `user.isActive`, `user`.`role` AS `user.role`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `user`.`deletedAt` AS `user.deletedAt` FROM `refreshtokens` AS `refreshtokens` LEFT OUTER JOIN `users` AS `user` ON `refreshtokens`.`userId` = `user`.`id` AND (`user`.`deletedAt` IS NULL) WHERE `refreshtokens`.`token` = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY1MzcyODIyMywiZXhwIjoxNjUzODE0NjIzfQ.3PynSv09MzZSMjNDGUCgU0G5-aybyIM8QcMY6Agcr_g';
Executing (default): SELECT `refreshtokens`.`id`, `refreshtokens`.`token`, `refreshtokens`.`createdAt`, `refreshtokens`.`updatedAt`, 
`refreshtokens`.`userId`, `user`.`id` AS `user.id`, `user`.`lastName` AS `user.lastName`, `user`.`name` AS `user.name`, `user`.`email` AS `user.email`, `user`.`password` AS `user.password`, `user`.`profilePicture` AS `user.profilePicture`, `user`.`coverPicture` AS `user.coverPicture`, `user`.`bio` AS `user.bio`, `user`.`isActive` AS `user.isActive`, `user`.`role` AS `user.role`, `user`.`createdAt` AS `user.createdAt`, `user`.`updatedAt` AS `user.updatedAt`, `user`.`deletedAt` AS `user.deletedAt` FROM `refreshtokens` AS `refreshtokens` LEFT OUTER JOIN `users` AS `user` ON `refreshtokens`.`userId` = `user`.`id` AND (`user`.`deletedAt` IS NULL) WHERE `refreshtokens`.`token` = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY1MzcyODIyMywiZXhwIjoxNjUzODE0NjIzfQ.3PynSv09MzZSMjNDGUCgU0G5-aybyIM8QcMY6Agcr_g';
encontro el foundtoken? :  refreshtokens {
  dataValues: {
    id: 15,
    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY1MzcyODIyMywiZXhwIjoxNjUzODE0NjIzfQ.3PynSv09MzZSMjNDGUCgU0G5-aybyIM8QcMY6Agcr_g',
    createdAt: 2022-05-28T08:57:03.000Z,
    updatedAt: 2022-05-28T08:57:03.000Z,
    userId: 1,
    user: users {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    }
  },
  _previousDataValues: {
    id: 15,
    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY1MzcyODIyMywiZXhwIjoxNjUzODE0NjIzfQ.3PynSv09MzZSMjNDGUCgU0G5-aybyIM8QcMY6Agcr_g',
    createdAt: 2022-05-28T08:57:03.000Z,
    updatedAt: 2022-05-28T08:57:03.000Z,
    userId: 1,
    user: users {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    }
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    include: [ [Object] ],
    includeNames: [ 'user' ],
    includeMap: { user: [Object] },
    includeValidated: true,
    attributes: [ 'id', 'token', 'createdAt', 'updatedAt', 'userId' ],
    raw: true
  },
  isNewRecord: false,
  user: users {
    dataValues: {
      id: 1,
      lastName: 'Perez',
      name: 'Maria',
      email: 'admin@groupomania.com',
      password: '$2a$12$u90HaCOZbrICiBKnxPMUWuRsJEhn2DHpPhmOjvcdSDmEru6ZukKVu',
      profilePicture: '',
      coverPicture: '',
      bio: '',
      isActive: 1,
      role: 'admin',
      createdAt: 2022-05-27T07:06:05.000Z,
      updatedAt: 2022-05-27T07:06:05.000Z,
      deletedAt: null
    },
    _previousDataValues: {
      id: 1,
      lastName: 'Perez',
      name: 'Maria',
      email: 'admin@groupomania.com',
      password: '$2a$12$u90HaCOZbrICiBKnxPMUWuRsJEhn2DHpPhmOjvcdSDmEru6ZukKVu',
      profilePicture: '',
      coverPicture: '',
      bio: '',
      isActive: 1,
      role: 'admin',
      createdAt: 2022-05-27T07:06:05.000Z,
      updatedAt: 2022-05-27T07:06:05.000Z,
      deletedAt: null
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      include: undefined,
      includeNames: undefined,
      includeMap: undefined,
      includeValidated: true,
      raw: true,
      attributes: undefined
    },
    isNewRecord: false
  }
}
el token se decodifico, vamos a ver si son los mismos usuariso el del token y el de la db L68
este es el ultimo catche respuest 500L145
encontro el foundtoken? :  refreshtokens {
  dataValues: {
    id: 15,
    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY1MzcyODIyMywiZXhwIjoxNjUzODE0NjIzfQ.3PynSv09MzZSMjNDGUCgU0G5-aybyIM8QcMY6Agcr_g',
    createdAt: 2022-05-28T08:57:03.000Z,
    updatedAt: 2022-05-28T08:57:03.000Z,
    userId: 1,
    user: users {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    }
  },
  _previousDataValues: {
    id: 15,
    token: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY1MzcyODIyMywiZXhwIjoxNjUzODE0NjIzfQ.3PynSv09MzZSMjNDGUCgU0G5-aybyIM8QcMY6Agcr_g',
    createdAt: 2022-05-28T08:57:03.000Z,
    updatedAt: 2022-05-28T08:57:03.000Z,
    userId: 1,
    user: users {
      dataValues: [Object],
      _previousDataValues: [Object],
      uniqno: 1,
      _changed: Set(0) {},
      _options: [Object],
      isNewRecord: false
    }
  },
  uniqno: 1,
  _changed: Set(0) {},
  _options: {
    isNewRecord: false,
    _schema: null,
    _schemaDelimiter: '',
    include: [ [Object] ],
    includeNames: [ 'user' ],
    includeMap: { user: [Object] },
    includeValidated: true,
    attributes: [ 'id', 'token', 'createdAt', 'updatedAt', 'userId' ],
    raw: true
  },
  isNewRecord: false,
  user: users {
    dataValues: {
      id: 1,
      lastName: 'Perez',
      name: 'Maria',
      email: 'admin@groupomania.com',
      password: '$2a$12$u90HaCOZbrICiBKnxPMUWuRsJEhn2DHpPhmOjvcdSDmEru6ZukKVu',
      profilePicture: '',
      coverPicture: '',
      bio: '',
      isActive: 1,
      role: 'admin',
      createdAt: 2022-05-27T07:06:05.000Z,
      updatedAt: 2022-05-27T07:06:05.000Z,
      deletedAt: null
    },
    _previousDataValues: {
      id: 1,
      lastName: 'Perez',
      name: 'Maria',
      email: 'admin@groupomania.com',
      password: '$2a$12$u90HaCOZbrICiBKnxPMUWuRsJEhn2DHpPhmOjvcdSDmEru6ZukKVu',
      profilePicture: '',
      coverPicture: '',
      bio: '',
      isActive: 1,
      role: 'admin',
      createdAt: 2022-05-27T07:06:05.000Z,
      updatedAt: 2022-05-27T07:06:05.000Z,
      deletedAt: null
    },
    uniqno: 1,
    _changed: Set(0) {},
    _options: {
      isNewRecord: false,
      _schema: null,
      _schemaDelimiter: '',
      include: undefined,
      includeNames: undefined,
      includeMap: undefined,
      includeValidated: true,
      raw: true,
      attributes: undefined
    },
    isNewRecord: false
  }
}
el token se decodifico, vamos a ver si son los mismos usuariso el del token y el de la db L68
este es el ultimo catche respuest 500L145